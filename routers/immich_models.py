# generated by datamodel-codegen:
#   filename:  immich.json
#   timestamp: 2025-09-12T19:46:07+00:00

from __future__ import annotations

from datetime import date
from enum import Enum
from typing import Annotated, Any, Dict, List, Optional
from uuid import UUID

from pydantic import AnyUrl, AwareDatetime, BaseModel, EmailStr, Field, RootModel


class ActivityStatisticsResponseDto(BaseModel):
    comments: int
    likes: int


class AdminOnboardingUpdateDto(BaseModel):
    isOnboarded: bool


class AlbumStatisticsResponseDto(BaseModel):
    notShared: int
    owned: int
    shared: int


class AlbumUserRole(Enum):
    editor = "editor"
    viewer = "viewer"


class AlbumsAddAssetsDto(BaseModel):
    albumIds: List[UUID]
    assetIds: List[UUID]


class AssetBulkDeleteDto(BaseModel):
    force: Optional[bool] = None
    ids: List[UUID]


class AssetBulkUploadCheckItem(BaseModel):
    checksum: Annotated[str, Field(description="base64 or hex encoded sha1 hash")]
    id: str


class Action(Enum):
    accept = "accept"
    reject = "reject"


class Reason(Enum):
    duplicate = "duplicate"
    unsupported_format = "unsupported-format"


class AssetBulkUploadCheckResult(BaseModel):
    action: Action
    assetId: Optional[str] = None
    id: str
    isTrashed: Optional[bool] = None
    reason: Optional[Reason] = None


class AssetDeltaSyncDto(BaseModel):
    updatedAfter: AwareDatetime
    userIds: List[UUID]


class AssetFaceCreateDto(BaseModel):
    assetId: UUID
    height: int
    imageHeight: int
    imageWidth: int
    personId: UUID
    width: int
    x: int
    y: int


class AssetFaceDeleteDto(BaseModel):
    force: bool


class AssetFaceUpdateItem(BaseModel):
    assetId: UUID
    personId: UUID


class AssetFullSyncDto(BaseModel):
    lastId: Optional[UUID] = None
    limit: Annotated[int, Field(ge=1)]
    updatedUntil: AwareDatetime
    userId: Optional[UUID] = None


class AssetIdsDto(BaseModel):
    assetIds: List[UUID]


class Error(Enum):
    duplicate = "duplicate"
    no_permission = "no_permission"
    not_found = "not_found"


class AssetIdsResponseDto(BaseModel):
    assetId: str
    error: Optional[Error] = None
    success: bool


class AssetJobName(Enum):
    refresh_faces = "refresh-faces"
    refresh_metadata = "refresh-metadata"
    regenerate_thumbnail = "regenerate-thumbnail"
    transcode_video = "transcode-video"


class AssetJobsDto(BaseModel):
    assetIds: List[UUID]
    name: AssetJobName


class AssetMediaReplaceDto(BaseModel):
    assetData: bytes
    deviceAssetId: str
    deviceId: str
    duration: Optional[str] = None
    fileCreatedAt: AwareDatetime
    fileModifiedAt: AwareDatetime
    filename: Optional[str] = None


class AssetMediaSize(Enum):
    fullsize = "fullsize"
    preview = "preview"
    thumbnail = "thumbnail"


class AssetMediaStatus(Enum):
    created = "created"
    replaced = "replaced"
    duplicate = "duplicate"


class AssetMetadataKey(Enum):
    mobile_app = "mobile-app"


class AssetMetadataResponseDto(BaseModel):
    key: AssetMetadataKey
    updatedAt: AwareDatetime
    value: Dict[str, Any]


class AssetMetadataUpsertItemDto(BaseModel):
    key: AssetMetadataKey
    value: Dict[str, Any]


class AssetOrder(Enum):
    asc = "asc"
    desc = "desc"


class AssetStackResponseDto(BaseModel):
    assetCount: int
    id: str
    primaryAssetId: str


class AssetStatsResponseDto(BaseModel):
    images: int
    total: int
    videos: int


class AssetTypeEnum(Enum):
    IMAGE = "IMAGE"
    VIDEO = "VIDEO"
    AUDIO = "AUDIO"
    OTHER = "OTHER"


class AssetVisibility(Enum):
    archive = "archive"
    timeline = "timeline"
    hidden = "hidden"
    locked = "locked"


class AudioCodec(Enum):
    mp3 = "mp3"
    aac = "aac"
    libopus = "libopus"
    pcm_s16le = "pcm_s16le"


class AuthStatusResponseDto(BaseModel):
    expiresAt: Optional[str] = None
    isElevated: bool
    password: bool
    pinCode: bool
    pinExpiresAt: Optional[str] = None


class BulkIdErrorReason(Enum):
    duplicate = "duplicate"
    no_permission = "no_permission"
    not_found = "not_found"
    unknown = "unknown"


class Error2(Enum):
    duplicate = "duplicate"
    no_permission = "no_permission"
    not_found = "not_found"
    unknown = "unknown"


class BulkIdResponseDto(BaseModel):
    error: Optional[Error2] = None
    id: str
    success: bool


class BulkIdsDto(BaseModel):
    ids: List[UUID]


class CLIPConfig(BaseModel):
    enabled: bool
    modelName: str


class CQMode(Enum):
    auto = "auto"
    cqp = "cqp"
    icq = "icq"


class CastResponse(BaseModel):
    gCastEnabled: bool


class CastUpdate(BaseModel):
    gCastEnabled: Optional[bool] = None


class ChangePasswordDto(BaseModel):
    newPassword: Annotated[str, Field(examples=["password"], min_length=8)]
    password: Annotated[str, Field(examples=["password"])]


class CheckExistingAssetsDto(BaseModel):
    deviceAssetIds: Annotated[List[str], Field(min_length=1)]
    deviceId: str


class CheckExistingAssetsResponseDto(BaseModel):
    existingIds: List[str]


class Colorspace(Enum):
    srgb = "srgb"
    p3 = "p3"


class CreateLibraryDto(BaseModel):
    exclusionPatterns: Annotated[Optional[List[str]], Field(max_length=128)] = None
    importPaths: Annotated[Optional[List[str]], Field(max_length=128)] = None
    name: Optional[str] = None
    ownerId: UUID


class CreateProfileImageDto(BaseModel):
    file: bytes


class CreateProfileImageResponseDto(BaseModel):
    profileChangedAt: AwareDatetime
    profileImagePath: str
    userId: str


class DatabaseBackupConfig(BaseModel):
    cronExpression: str
    enabled: bool
    keepLastAmount: Annotated[float, Field(ge=1.0)]


class DownloadArchiveInfo(BaseModel):
    assetIds: List[str]
    size: int


class DownloadInfoDto(BaseModel):
    albumId: Optional[UUID] = None
    archiveSize: Annotated[Optional[int], Field(ge=1)] = None
    assetIds: Optional[List[UUID]] = None
    userId: Optional[UUID] = None


class DownloadResponse(BaseModel):
    archiveSize: int
    includeEmbeddedVideos: bool


class DownloadResponseDto(BaseModel):
    archives: List[DownloadArchiveInfo]
    totalSize: int


class DownloadUpdate(BaseModel):
    archiveSize: Annotated[Optional[int], Field(ge=1)] = None
    includeEmbeddedVideos: Optional[bool] = None


class DuplicateDetectionConfig(BaseModel):
    enabled: bool
    maxDistance: Annotated[float, Field(ge=0.001, le=0.1)]


class EmailNotificationsResponse(BaseModel):
    albumInvite: bool
    albumUpdate: bool
    enabled: bool


class EmailNotificationsUpdate(BaseModel):
    albumInvite: Optional[bool] = None
    albumUpdate: Optional[bool] = None
    enabled: Optional[bool] = None


class ExifResponseDto(BaseModel):
    city: Optional[str] = None
    country: Optional[str] = None
    dateTimeOriginal: Optional[AwareDatetime] = None
    description: Optional[str] = None
    exifImageHeight: Optional[float] = None
    exifImageWidth: Optional[float] = None
    exposureTime: Optional[str] = None
    fNumber: Optional[float] = None
    fileSizeInByte: Optional[int] = None
    focalLength: Optional[float] = None
    iso: Optional[float] = None
    latitude: Optional[float] = None
    lensModel: Optional[str] = None
    longitude: Optional[float] = None
    make: Optional[str] = None
    model: Optional[str] = None
    modifyDate: Optional[AwareDatetime] = None
    orientation: Optional[str] = None
    projectionType: Optional[str] = None
    rating: Optional[float] = None
    state: Optional[str] = None
    timeZone: Optional[str] = None


class FaceDto(BaseModel):
    id: UUID


class FacialRecognitionConfig(BaseModel):
    enabled: bool
    maxDistance: Annotated[float, Field(ge=0.1, le=2.0)]
    minFaces: Annotated[int, Field(ge=1)]
    minScore: Annotated[float, Field(ge=0.1, le=1.0)]
    modelName: str


class FoldersResponse(BaseModel):
    enabled: bool
    sidebarWeb: bool


class FoldersUpdate(BaseModel):
    enabled: Optional[bool] = None
    sidebarWeb: Optional[bool] = None


class ImageFormat(Enum):
    jpeg = "jpeg"
    webp = "webp"


class JobCommand(Enum):
    start = "start"
    pause = "pause"
    resume = "resume"
    empty = "empty"
    clear_failed = "clear-failed"


class JobCommandDto(BaseModel):
    command: JobCommand
    force: Optional[bool] = None


class JobCountsDto(BaseModel):
    active: int
    completed: int
    delayed: int
    failed: int
    paused: int
    waiting: int


class JobName(Enum):
    thumbnailGeneration = "thumbnailGeneration"
    metadataExtraction = "metadataExtraction"
    videoConversion = "videoConversion"
    faceDetection = "faceDetection"
    facialRecognition = "facialRecognition"
    smartSearch = "smartSearch"
    duplicateDetection = "duplicateDetection"
    backgroundTask = "backgroundTask"
    storageTemplateMigration = "storageTemplateMigration"
    migration = "migration"
    search = "search"
    sidecar = "sidecar"
    library = "library"
    notifications = "notifications"
    backupDatabase = "backupDatabase"


class JobSettingsDto(BaseModel):
    concurrency: Annotated[int, Field(ge=1)]


class LibraryResponseDto(BaseModel):
    assetCount: int
    createdAt: AwareDatetime
    exclusionPatterns: List[str]
    id: str
    importPaths: List[str]
    name: str
    ownerId: str
    refreshedAt: AwareDatetime
    updatedAt: AwareDatetime


class LibraryStatsResponseDto(BaseModel):
    photos: int
    total: int
    usage: int
    videos: int


class LicenseKeyDto(BaseModel):
    activationKey: str
    licenseKey: Annotated[str, Field(pattern="/IM(SV|CL)(-[\\dA-Za-z]{4}){8}/")]


class LicenseResponseDto(BaseModel):
    activatedAt: AwareDatetime
    activationKey: str
    licenseKey: Annotated[str, Field(pattern="/IM(SV|CL)(-[\\dA-Za-z]{4}){8}/")]


class LogLevel(Enum):
    verbose = "verbose"
    debug = "debug"
    log = "log"
    warn = "warn"
    error = "error"
    fatal = "fatal"


class LoginCredentialDto(BaseModel):
    email: Annotated[EmailStr, Field(examples=["testuser@email.com"])]
    password: Annotated[str, Field(examples=["password"])]


class LoginResponseDto(BaseModel):
    accessToken: str
    isAdmin: bool
    isOnboarded: bool
    name: str
    profileImagePath: str
    shouldChangePassword: bool
    userEmail: str
    userId: str


class LogoutResponseDto(BaseModel):
    redirectUri: str
    successful: bool


class ManualJobName(Enum):
    person_cleanup = "person-cleanup"
    tag_cleanup = "tag-cleanup"
    user_cleanup = "user-cleanup"
    memory_cleanup = "memory-cleanup"
    memory_create = "memory-create"
    backup_database = "backup-database"


class MapMarkerResponseDto(BaseModel):
    city: str
    country: str
    id: str
    lat: float
    lon: float
    state: str


class MapReverseGeocodeResponseDto(BaseModel):
    city: str
    country: str
    state: str


class MemoriesResponse(BaseModel):
    enabled: bool


class MemoriesUpdate(BaseModel):
    enabled: Optional[bool] = None


class MemoryStatisticsResponseDto(BaseModel):
    total: int


class MemoryType(Enum):
    on_this_day = "on_this_day"


class MemoryUpdateDto(BaseModel):
    isSaved: Optional[bool] = None
    memoryAt: Optional[AwareDatetime] = None
    seenAt: Optional[AwareDatetime] = None


class MergePersonDto(BaseModel):
    ids: List[UUID]


class MetadataSearchDto(BaseModel):
    albumIds: Optional[List[UUID]] = None
    checksum: Optional[str] = None
    city: Optional[str] = None
    country: Optional[str] = None
    createdAfter: Optional[AwareDatetime] = None
    createdBefore: Optional[AwareDatetime] = None
    description: Optional[str] = None
    deviceAssetId: Optional[str] = None
    deviceId: Optional[str] = None
    encodedVideoPath: Optional[str] = None
    id: Optional[UUID] = None
    isEncoded: Optional[bool] = None
    isFavorite: Optional[bool] = None
    isMotion: Optional[bool] = None
    isNotInAlbum: Optional[bool] = None
    isOffline: Optional[bool] = None
    lensModel: Optional[str] = None
    libraryId: Optional[UUID] = None
    make: Optional[str] = None
    model: Optional[str] = None
    order: Optional[AssetOrder] = AssetOrder.desc
    originalFileName: Optional[str] = None
    originalPath: Optional[str] = None
    page: Annotated[Optional[float], Field(ge=1.0)] = None
    personIds: Optional[List[UUID]] = None
    previewPath: Optional[str] = None
    rating: Annotated[Optional[float], Field(ge=-1.0, le=5.0)] = None
    size: Annotated[Optional[float], Field(ge=1.0, le=1000.0)] = None
    state: Optional[str] = None
    tagIds: Optional[List[UUID]] = None
    takenAfter: Optional[AwareDatetime] = None
    takenBefore: Optional[AwareDatetime] = None
    thumbnailPath: Optional[str] = None
    trashedAfter: Optional[AwareDatetime] = None
    trashedBefore: Optional[AwareDatetime] = None
    type: Optional[AssetTypeEnum] = None
    updatedAfter: Optional[AwareDatetime] = None
    updatedBefore: Optional[AwareDatetime] = None
    visibility: Optional[AssetVisibility] = None
    withDeleted: Optional[bool] = None
    withExif: Optional[bool] = None
    withPeople: Optional[bool] = None
    withStacked: Optional[bool] = None


class NotificationDeleteAllDto(BaseModel):
    ids: List[UUID]


class NotificationLevel(Enum):
    success = "success"
    error = "error"
    warning = "warning"
    info = "info"


class NotificationType(Enum):
    JobFailed = "JobFailed"
    BackupFailed = "BackupFailed"
    SystemMessage = "SystemMessage"
    Custom = "Custom"


class NotificationUpdateAllDto(BaseModel):
    ids: List[UUID]
    readAt: Optional[AwareDatetime] = None


class NotificationUpdateDto(BaseModel):
    readAt: Optional[AwareDatetime] = None


class OAuthAuthorizeResponseDto(BaseModel):
    url: str


class OAuthCallbackDto(BaseModel):
    codeVerifier: Optional[str] = None
    state: Optional[str] = None
    url: str


class OAuthConfigDto(BaseModel):
    codeChallenge: Optional[str] = None
    redirectUri: str
    state: Optional[str] = None


class OAuthTokenEndpointAuthMethod(Enum):
    client_secret_post = "client_secret_post"
    client_secret_basic = "client_secret_basic"


class OnThisDayDto(BaseModel):
    year: Annotated[float, Field(ge=1.0)]


class OnboardingDto(BaseModel):
    isOnboarded: bool


class OnboardingResponseDto(BaseModel):
    isOnboarded: bool


class PartnerCreateDto(BaseModel):
    sharedWithId: UUID


class PartnerDirection(Enum):
    shared_by = "shared-by"
    shared_with = "shared-with"


class PartnerUpdateDto(BaseModel):
    inTimeline: bool


class PeopleResponse(BaseModel):
    enabled: bool
    sidebarWeb: bool


class PeopleUpdate(BaseModel):
    enabled: Optional[bool] = None
    sidebarWeb: Optional[bool] = None


class PeopleUpdateItem(BaseModel):
    birthDate: Annotated[
        Optional[date],
        Field(
            description="Person date of birth.\nNote: the mobile app cannot currently set the birth date to null."
        ),
    ] = None
    color: Optional[str] = None
    featureFaceAssetId: Annotated[
        Optional[UUID],
        Field(description="Asset is used to get the feature face thumbnail."),
    ] = None
    id: Annotated[str, Field(description="Person id.")]
    isFavorite: Optional[bool] = None
    isHidden: Annotated[Optional[bool], Field(description="Person visibility")] = None
    name: Annotated[Optional[str], Field(description="Person name.")] = None


class Permission(Enum):
    all = "all"
    activity_create = "activity.create"
    activity_read = "activity.read"
    activity_update = "activity.update"
    activity_delete = "activity.delete"
    activity_statistics = "activity.statistics"
    apiKey_create = "apiKey.create"
    apiKey_read = "apiKey.read"
    apiKey_update = "apiKey.update"
    apiKey_delete = "apiKey.delete"
    asset_read = "asset.read"
    asset_update = "asset.update"
    asset_delete = "asset.delete"
    asset_statistics = "asset.statistics"
    asset_share = "asset.share"
    asset_view = "asset.view"
    asset_download = "asset.download"
    asset_upload = "asset.upload"
    asset_replace = "asset.replace"
    album_create = "album.create"
    album_read = "album.read"
    album_update = "album.update"
    album_delete = "album.delete"
    album_statistics = "album.statistics"
    album_share = "album.share"
    album_download = "album.download"
    albumAsset_create = "albumAsset.create"
    albumAsset_delete = "albumAsset.delete"
    albumUser_create = "albumUser.create"
    albumUser_update = "albumUser.update"
    albumUser_delete = "albumUser.delete"
    auth_changePassword = "auth.changePassword"
    authDevice_delete = "authDevice.delete"
    archive_read = "archive.read"
    duplicate_read = "duplicate.read"
    duplicate_delete = "duplicate.delete"
    face_create = "face.create"
    face_read = "face.read"
    face_update = "face.update"
    face_delete = "face.delete"
    job_create = "job.create"
    job_read = "job.read"
    library_create = "library.create"
    library_read = "library.read"
    library_update = "library.update"
    library_delete = "library.delete"
    library_statistics = "library.statistics"
    timeline_read = "timeline.read"
    timeline_download = "timeline.download"
    memory_create = "memory.create"
    memory_read = "memory.read"
    memory_update = "memory.update"
    memory_delete = "memory.delete"
    memory_statistics = "memory.statistics"
    memoryAsset_create = "memoryAsset.create"
    memoryAsset_delete = "memoryAsset.delete"
    notification_create = "notification.create"
    notification_read = "notification.read"
    notification_update = "notification.update"
    notification_delete = "notification.delete"
    partner_create = "partner.create"
    partner_read = "partner.read"
    partner_update = "partner.update"
    partner_delete = "partner.delete"
    person_create = "person.create"
    person_read = "person.read"
    person_update = "person.update"
    person_delete = "person.delete"
    person_statistics = "person.statistics"
    person_merge = "person.merge"
    person_reassign = "person.reassign"
    pinCode_create = "pinCode.create"
    pinCode_update = "pinCode.update"
    pinCode_delete = "pinCode.delete"
    server_about = "server.about"
    server_apkLinks = "server.apkLinks"
    server_storage = "server.storage"
    server_statistics = "server.statistics"
    server_versionCheck = "server.versionCheck"
    serverLicense_read = "serverLicense.read"
    serverLicense_update = "serverLicense.update"
    serverLicense_delete = "serverLicense.delete"
    session_create = "session.create"
    session_read = "session.read"
    session_update = "session.update"
    session_delete = "session.delete"
    session_lock = "session.lock"
    sharedLink_create = "sharedLink.create"
    sharedLink_read = "sharedLink.read"
    sharedLink_update = "sharedLink.update"
    sharedLink_delete = "sharedLink.delete"
    stack_create = "stack.create"
    stack_read = "stack.read"
    stack_update = "stack.update"
    stack_delete = "stack.delete"
    sync_stream = "sync.stream"
    syncCheckpoint_read = "syncCheckpoint.read"
    syncCheckpoint_update = "syncCheckpoint.update"
    syncCheckpoint_delete = "syncCheckpoint.delete"
    systemConfig_read = "systemConfig.read"
    systemConfig_update = "systemConfig.update"
    systemMetadata_read = "systemMetadata.read"
    systemMetadata_update = "systemMetadata.update"
    tag_create = "tag.create"
    tag_read = "tag.read"
    tag_update = "tag.update"
    tag_delete = "tag.delete"
    tag_asset = "tag.asset"
    user_read = "user.read"
    user_update = "user.update"
    userLicense_create = "userLicense.create"
    userLicense_read = "userLicense.read"
    userLicense_update = "userLicense.update"
    userLicense_delete = "userLicense.delete"
    userOnboarding_read = "userOnboarding.read"
    userOnboarding_update = "userOnboarding.update"
    userOnboarding_delete = "userOnboarding.delete"
    userPreference_read = "userPreference.read"
    userPreference_update = "userPreference.update"
    userProfileImage_create = "userProfileImage.create"
    userProfileImage_read = "userProfileImage.read"
    userProfileImage_update = "userProfileImage.update"
    userProfileImage_delete = "userProfileImage.delete"
    adminUser_create = "adminUser.create"
    adminUser_read = "adminUser.read"
    adminUser_update = "adminUser.update"
    adminUser_delete = "adminUser.delete"
    adminAuth_unlinkAll = "adminAuth.unlinkAll"


class PersonCreateDto(BaseModel):
    birthDate: Annotated[
        Optional[date],
        Field(
            description="Person date of birth.\nNote: the mobile app cannot currently set the birth date to null."
        ),
    ] = None
    color: Optional[str] = None
    isFavorite: Optional[bool] = None
    isHidden: Annotated[Optional[bool], Field(description="Person visibility")] = None
    name: Annotated[Optional[str], Field(description="Person name.")] = None


class PersonResponseDto(BaseModel):
    birthDate: date
    color: Annotated[
        Optional[str], Field(description="This property was added in v1.126.0")
    ] = None
    id: str
    isFavorite: Annotated[
        Optional[bool], Field(description="This property was added in v1.126.0")
    ] = None
    isHidden: bool
    name: str
    thumbnailPath: str
    updatedAt: Annotated[
        Optional[AwareDatetime],
        Field(description="This property was added in v1.107.0"),
    ] = None


class PersonStatisticsResponseDto(BaseModel):
    assets: int


class PersonUpdateDto(BaseModel):
    birthDate: Annotated[
        Optional[date],
        Field(
            description="Person date of birth.\nNote: the mobile app cannot currently set the birth date to null."
        ),
    ] = None
    color: Optional[str] = None
    featureFaceAssetId: Annotated[
        Optional[UUID],
        Field(description="Asset is used to get the feature face thumbnail."),
    ] = None
    isFavorite: Optional[bool] = None
    isHidden: Annotated[Optional[bool], Field(description="Person visibility")] = None
    name: Annotated[Optional[str], Field(description="Person name.")] = None


class PinCodeChangeDto(BaseModel):
    newPinCode: Annotated[str, Field(examples=["123456"])]
    password: Optional[str] = None
    pinCode: Annotated[Optional[str], Field(examples=["123456"])] = None


class PinCodeResetDto(BaseModel):
    password: Optional[str] = None
    pinCode: Annotated[Optional[str], Field(examples=["123456"])] = None


class PinCodeSetupDto(BaseModel):
    pinCode: Annotated[str, Field(examples=["123456"])]


class PlacesResponseDto(BaseModel):
    admin1name: Optional[str] = None
    admin2name: Optional[str] = None
    latitude: float
    longitude: float
    name: str


class PurchaseResponse(BaseModel):
    hideBuyButtonUntil: str
    showSupportBadge: bool


class PurchaseUpdate(BaseModel):
    hideBuyButtonUntil: Optional[str] = None
    showSupportBadge: Optional[bool] = None


class QueueStatusDto(BaseModel):
    isActive: bool
    isPaused: bool


class RandomSearchDto(BaseModel):
    albumIds: Optional[List[UUID]] = None
    city: Optional[str] = None
    country: Optional[str] = None
    createdAfter: Optional[AwareDatetime] = None
    createdBefore: Optional[AwareDatetime] = None
    deviceId: Optional[str] = None
    isEncoded: Optional[bool] = None
    isFavorite: Optional[bool] = None
    isMotion: Optional[bool] = None
    isNotInAlbum: Optional[bool] = None
    isOffline: Optional[bool] = None
    lensModel: Optional[str] = None
    libraryId: Optional[UUID] = None
    make: Optional[str] = None
    model: Optional[str] = None
    personIds: Optional[List[UUID]] = None
    rating: Annotated[Optional[float], Field(ge=-1.0, le=5.0)] = None
    size: Annotated[Optional[float], Field(ge=1.0, le=1000.0)] = None
    state: Optional[str] = None
    tagIds: Optional[List[UUID]] = None
    takenAfter: Optional[AwareDatetime] = None
    takenBefore: Optional[AwareDatetime] = None
    trashedAfter: Optional[AwareDatetime] = None
    trashedBefore: Optional[AwareDatetime] = None
    type: Optional[AssetTypeEnum] = None
    updatedAfter: Optional[AwareDatetime] = None
    updatedBefore: Optional[AwareDatetime] = None
    visibility: Optional[AssetVisibility] = None
    withDeleted: Optional[bool] = None
    withExif: Optional[bool] = None
    withPeople: Optional[bool] = None
    withStacked: Optional[bool] = None


class RatingsResponse(BaseModel):
    enabled: bool


class RatingsUpdate(BaseModel):
    enabled: Optional[bool] = None


class ReactionLevel(Enum):
    album = "album"
    asset = "asset"


class ReactionType(Enum):
    comment = "comment"
    like = "like"


class ReverseGeocodingStateResponseDto(BaseModel):
    lastImportFileName: str
    lastUpdate: str


class SearchFacetCountResponseDto(BaseModel):
    count: int
    value: str


class SearchFacetResponseDto(BaseModel):
    counts: List[SearchFacetCountResponseDto]
    fieldName: str


class SearchStatisticsResponseDto(BaseModel):
    total: int


class SearchSuggestionType(Enum):
    country = "country"
    state = "state"
    city = "city"
    camera_make = "camera-make"
    camera_model = "camera-model"


class ServerAboutResponseDto(BaseModel):
    build: Optional[str] = None
    buildImage: Optional[str] = None
    buildImageUrl: Optional[str] = None
    buildUrl: Optional[str] = None
    exiftool: Optional[str] = None
    ffmpeg: Optional[str] = None
    imagemagick: Optional[str] = None
    libvips: Optional[str] = None
    licensed: bool
    nodejs: Optional[str] = None
    repository: Optional[str] = None
    repositoryUrl: Optional[str] = None
    sourceCommit: Optional[str] = None
    sourceRef: Optional[str] = None
    sourceUrl: Optional[str] = None
    thirdPartyBugFeatureUrl: Optional[str] = None
    thirdPartyDocumentationUrl: Optional[str] = None
    thirdPartySourceUrl: Optional[str] = None
    thirdPartySupportUrl: Optional[str] = None
    version: str
    versionUrl: str


class ServerApkLinksDto(BaseModel):
    arm64v8a: str
    armeabiv7a: str
    universal: str
    x86_64: str


class ServerConfigDto(BaseModel):
    externalDomain: str
    isInitialized: bool
    isOnboarded: bool
    loginPageMessage: str
    mapDarkStyleUrl: str
    mapLightStyleUrl: str
    oauthButtonText: str
    publicUsers: bool
    trashDays: int
    userDeleteDelay: int


class ServerFeaturesDto(BaseModel):
    configFile: bool
    duplicateDetection: bool
    email: bool
    facialRecognition: bool
    importFaces: bool
    map: bool
    oauth: bool
    oauthAutoLaunch: bool
    passwordLogin: bool
    reverseGeocoding: bool
    search: bool
    sidecar: bool
    smartSearch: bool
    trash: bool


class ServerMediaTypesResponseDto(BaseModel):
    image: List[str]
    sidecar: List[str]
    video: List[str]


class ServerPingResponse(BaseModel):
    res: Annotated[str, Field(examples=["pong"])]


class ServerStorageResponseDto(BaseModel):
    diskAvailable: str
    diskAvailableRaw: int
    diskSize: str
    diskSizeRaw: int
    diskUsagePercentage: float
    diskUse: str
    diskUseRaw: int


class ServerThemeDto(BaseModel):
    customCss: str


class ServerVersionHistoryResponseDto(BaseModel):
    createdAt: AwareDatetime
    id: str
    version: str


class ServerVersionResponseDto(BaseModel):
    major: int
    minor: int
    patch: int


class SessionCreateDto(BaseModel):
    deviceOS: Optional[str] = None
    deviceType: Optional[str] = None
    duration: Annotated[
        Optional[float], Field(description="session duration, in seconds", ge=1.0)
    ] = None


class SessionCreateResponseDto(BaseModel):
    createdAt: str
    current: bool
    deviceOS: str
    deviceType: str
    expiresAt: Optional[str] = None
    id: str
    isPendingSyncReset: bool
    token: str
    updatedAt: str


class SessionResponseDto(BaseModel):
    createdAt: str
    current: bool
    deviceOS: str
    deviceType: str
    expiresAt: Optional[str] = None
    id: str
    isPendingSyncReset: bool
    updatedAt: str


class SessionUnlockDto(BaseModel):
    password: Optional[str] = None
    pinCode: Annotated[Optional[str], Field(examples=["123456"])] = None


class SessionUpdateDto(BaseModel):
    isPendingSyncReset: Optional[bool] = None


class SharedLinkEditDto(BaseModel):
    allowDownload: Optional[bool] = None
    allowUpload: Optional[bool] = None
    changeExpiryTime: Annotated[
        Optional[bool],
        Field(
            description="Few clients cannot send null to set the expiryTime to never.\nSetting this flag and not sending expiryAt is considered as null instead.\nClients that can send null values can ignore this."
        ),
    ] = None
    description: Optional[str] = None
    expiresAt: Optional[AwareDatetime] = None
    password: Optional[str] = None
    showMetadata: Optional[bool] = None
    slug: Optional[str] = None


class SharedLinkType(Enum):
    ALBUM = "ALBUM"
    INDIVIDUAL = "INDIVIDUAL"


class SharedLinksResponse(BaseModel):
    enabled: bool
    sidebarWeb: bool


class SharedLinksUpdate(BaseModel):
    enabled: Optional[bool] = None
    sidebarWeb: Optional[bool] = None


class SignUpDto(BaseModel):
    email: Annotated[EmailStr, Field(examples=["testuser@email.com"])]
    name: Annotated[str, Field(examples=["Admin"])]
    password: Annotated[str, Field(examples=["password"])]


class SmartSearchDto(BaseModel):
    albumIds: Optional[List[UUID]] = None
    city: Optional[str] = None
    country: Optional[str] = None
    createdAfter: Optional[AwareDatetime] = None
    createdBefore: Optional[AwareDatetime] = None
    deviceId: Optional[str] = None
    isEncoded: Optional[bool] = None
    isFavorite: Optional[bool] = None
    isMotion: Optional[bool] = None
    isNotInAlbum: Optional[bool] = None
    isOffline: Optional[bool] = None
    language: Optional[str] = None
    lensModel: Optional[str] = None
    libraryId: Optional[UUID] = None
    make: Optional[str] = None
    model: Optional[str] = None
    page: Annotated[Optional[float], Field(ge=1.0)] = None
    personIds: Optional[List[UUID]] = None
    query: Optional[str] = None
    queryAssetId: Optional[UUID] = None
    rating: Annotated[Optional[float], Field(ge=-1.0, le=5.0)] = None
    size: Annotated[Optional[float], Field(ge=1.0, le=1000.0)] = None
    state: Optional[str] = None
    tagIds: Optional[List[UUID]] = None
    takenAfter: Optional[AwareDatetime] = None
    takenBefore: Optional[AwareDatetime] = None
    trashedAfter: Optional[AwareDatetime] = None
    trashedBefore: Optional[AwareDatetime] = None
    type: Optional[AssetTypeEnum] = None
    updatedAfter: Optional[AwareDatetime] = None
    updatedBefore: Optional[AwareDatetime] = None
    visibility: Optional[AssetVisibility] = None
    withDeleted: Optional[bool] = None
    withExif: Optional[bool] = None


class SourceType(Enum):
    machine_learning = "machine-learning"
    exif = "exif"
    manual = "manual"


class StackCreateDto(BaseModel):
    assetIds: Annotated[
        List[UUID], Field(description="first asset becomes the primary", min_length=2)
    ]


class StackUpdateDto(BaseModel):
    primaryAssetId: Optional[UUID] = None


class StatisticsSearchDto(BaseModel):
    albumIds: Optional[List[UUID]] = None
    city: Optional[str] = None
    country: Optional[str] = None
    createdAfter: Optional[AwareDatetime] = None
    createdBefore: Optional[AwareDatetime] = None
    description: Optional[str] = None
    deviceId: Optional[str] = None
    isEncoded: Optional[bool] = None
    isFavorite: Optional[bool] = None
    isMotion: Optional[bool] = None
    isNotInAlbum: Optional[bool] = None
    isOffline: Optional[bool] = None
    lensModel: Optional[str] = None
    libraryId: Optional[UUID] = None
    make: Optional[str] = None
    model: Optional[str] = None
    personIds: Optional[List[UUID]] = None
    rating: Annotated[Optional[float], Field(ge=-1.0, le=5.0)] = None
    state: Optional[str] = None
    tagIds: Optional[List[UUID]] = None
    takenAfter: Optional[AwareDatetime] = None
    takenBefore: Optional[AwareDatetime] = None
    trashedAfter: Optional[AwareDatetime] = None
    trashedBefore: Optional[AwareDatetime] = None
    type: Optional[AssetTypeEnum] = None
    updatedAfter: Optional[AwareDatetime] = None
    updatedBefore: Optional[AwareDatetime] = None
    visibility: Optional[AssetVisibility] = None


class SyncAckSetDto(BaseModel):
    acks: Annotated[List[str], Field(max_length=1000)]


class SyncAckV1(BaseModel):
    pass


class SyncAlbumDeleteV1(BaseModel):
    albumId: str


class SyncAlbumToAssetDeleteV1(BaseModel):
    albumId: str
    assetId: str


class SyncAlbumToAssetV1(BaseModel):
    albumId: str
    assetId: str


class SyncAlbumUserDeleteV1(BaseModel):
    albumId: str
    userId: str


class SyncAlbumUserV1(BaseModel):
    albumId: str
    role: AlbumUserRole
    userId: str


class SyncAlbumV1(BaseModel):
    createdAt: AwareDatetime
    description: str
    id: str
    isActivityEnabled: bool
    name: str
    order: AssetOrder
    ownerId: str
    thumbnailAssetId: str
    updatedAt: AwareDatetime


class SyncAssetDeleteV1(BaseModel):
    assetId: str


class SyncAssetExifV1(BaseModel):
    assetId: str
    city: str
    country: str
    dateTimeOriginal: AwareDatetime
    description: str
    exifImageHeight: int
    exifImageWidth: int
    exposureTime: str
    fNumber: float
    fileSizeInByte: int
    focalLength: float
    fps: float
    iso: int
    latitude: float
    lensModel: str
    longitude: float
    make: str
    model: str
    modifyDate: AwareDatetime
    orientation: str
    profileDescription: str
    projectionType: str
    rating: int
    state: str
    timeZone: str


class SyncAssetFaceDeleteV1(BaseModel):
    assetFaceId: str


class SyncAssetFaceV1(BaseModel):
    assetId: str
    boundingBoxX1: int
    boundingBoxX2: int
    boundingBoxY1: int
    boundingBoxY2: int
    id: str
    imageHeight: int
    imageWidth: int
    personId: str
    sourceType: str


class SyncAssetMetadataDeleteV1(BaseModel):
    assetId: str
    key: AssetMetadataKey


class SyncAssetMetadataV1(BaseModel):
    assetId: str
    key: AssetMetadataKey
    value: Dict[str, Any]


class SyncAssetV1(BaseModel):
    checksum: str
    deletedAt: AwareDatetime
    duration: str
    fileCreatedAt: AwareDatetime
    fileModifiedAt: AwareDatetime
    id: str
    isFavorite: bool
    libraryId: str
    livePhotoVideoId: str
    localDateTime: AwareDatetime
    originalFileName: str
    ownerId: str
    stackId: str
    thumbhash: str
    type: AssetTypeEnum
    visibility: AssetVisibility


class SyncCompleteV1(BaseModel):
    pass


class SyncEntityType(Enum):
    AuthUserV1 = "AuthUserV1"
    UserV1 = "UserV1"
    UserDeleteV1 = "UserDeleteV1"
    AssetV1 = "AssetV1"
    AssetDeleteV1 = "AssetDeleteV1"
    AssetExifV1 = "AssetExifV1"
    AssetMetadataV1 = "AssetMetadataV1"
    AssetMetadataDeleteV1 = "AssetMetadataDeleteV1"
    PartnerV1 = "PartnerV1"
    PartnerDeleteV1 = "PartnerDeleteV1"
    PartnerAssetV1 = "PartnerAssetV1"
    PartnerAssetBackfillV1 = "PartnerAssetBackfillV1"
    PartnerAssetDeleteV1 = "PartnerAssetDeleteV1"
    PartnerAssetExifV1 = "PartnerAssetExifV1"
    PartnerAssetExifBackfillV1 = "PartnerAssetExifBackfillV1"
    PartnerStackBackfillV1 = "PartnerStackBackfillV1"
    PartnerStackDeleteV1 = "PartnerStackDeleteV1"
    PartnerStackV1 = "PartnerStackV1"
    AlbumV1 = "AlbumV1"
    AlbumDeleteV1 = "AlbumDeleteV1"
    AlbumUserV1 = "AlbumUserV1"
    AlbumUserBackfillV1 = "AlbumUserBackfillV1"
    AlbumUserDeleteV1 = "AlbumUserDeleteV1"
    AlbumAssetCreateV1 = "AlbumAssetCreateV1"
    AlbumAssetUpdateV1 = "AlbumAssetUpdateV1"
    AlbumAssetBackfillV1 = "AlbumAssetBackfillV1"
    AlbumAssetExifCreateV1 = "AlbumAssetExifCreateV1"
    AlbumAssetExifUpdateV1 = "AlbumAssetExifUpdateV1"
    AlbumAssetExifBackfillV1 = "AlbumAssetExifBackfillV1"
    AlbumToAssetV1 = "AlbumToAssetV1"
    AlbumToAssetDeleteV1 = "AlbumToAssetDeleteV1"
    AlbumToAssetBackfillV1 = "AlbumToAssetBackfillV1"
    MemoryV1 = "MemoryV1"
    MemoryDeleteV1 = "MemoryDeleteV1"
    MemoryToAssetV1 = "MemoryToAssetV1"
    MemoryToAssetDeleteV1 = "MemoryToAssetDeleteV1"
    StackV1 = "StackV1"
    StackDeleteV1 = "StackDeleteV1"
    PersonV1 = "PersonV1"
    PersonDeleteV1 = "PersonDeleteV1"
    AssetFaceV1 = "AssetFaceV1"
    AssetFaceDeleteV1 = "AssetFaceDeleteV1"
    UserMetadataV1 = "UserMetadataV1"
    UserMetadataDeleteV1 = "UserMetadataDeleteV1"
    SyncAckV1 = "SyncAckV1"
    SyncResetV1 = "SyncResetV1"
    SyncCompleteV1 = "SyncCompleteV1"


class SyncMemoryAssetDeleteV1(BaseModel):
    assetId: str
    memoryId: str


class SyncMemoryAssetV1(BaseModel):
    assetId: str
    memoryId: str


class SyncMemoryDeleteV1(BaseModel):
    memoryId: str


class SyncMemoryV1(BaseModel):
    createdAt: AwareDatetime
    data: Dict[str, Any]
    deletedAt: AwareDatetime
    hideAt: AwareDatetime
    id: str
    isSaved: bool
    memoryAt: AwareDatetime
    ownerId: str
    seenAt: AwareDatetime
    showAt: AwareDatetime
    type: MemoryType
    updatedAt: AwareDatetime


class SyncPartnerDeleteV1(BaseModel):
    sharedById: str
    sharedWithId: str


class SyncPartnerV1(BaseModel):
    inTimeline: bool
    sharedById: str
    sharedWithId: str


class SyncPersonDeleteV1(BaseModel):
    personId: str


class SyncPersonV1(BaseModel):
    birthDate: AwareDatetime
    color: str
    createdAt: AwareDatetime
    faceAssetId: str
    id: str
    isFavorite: bool
    isHidden: bool
    name: str
    ownerId: str
    updatedAt: AwareDatetime


class SyncRequestType(Enum):
    AlbumsV1 = "AlbumsV1"
    AlbumUsersV1 = "AlbumUsersV1"
    AlbumToAssetsV1 = "AlbumToAssetsV1"
    AlbumAssetsV1 = "AlbumAssetsV1"
    AlbumAssetExifsV1 = "AlbumAssetExifsV1"
    AssetsV1 = "AssetsV1"
    AssetExifsV1 = "AssetExifsV1"
    AssetMetadataV1 = "AssetMetadataV1"
    AuthUsersV1 = "AuthUsersV1"
    MemoriesV1 = "MemoriesV1"
    MemoryToAssetsV1 = "MemoryToAssetsV1"
    PartnersV1 = "PartnersV1"
    PartnerAssetsV1 = "PartnerAssetsV1"
    PartnerAssetExifsV1 = "PartnerAssetExifsV1"
    PartnerStacksV1 = "PartnerStacksV1"
    StacksV1 = "StacksV1"
    UsersV1 = "UsersV1"
    PeopleV1 = "PeopleV1"
    AssetFacesV1 = "AssetFacesV1"
    UserMetadataV1 = "UserMetadataV1"


class SyncResetV1(BaseModel):
    pass


class SyncStackDeleteV1(BaseModel):
    stackId: str


class SyncStackV1(BaseModel):
    createdAt: AwareDatetime
    id: str
    ownerId: str
    primaryAssetId: str
    updatedAt: AwareDatetime


class SyncStreamDto(BaseModel):
    reset: Optional[bool] = None
    types: List[SyncRequestType]


class SyncUserDeleteV1(BaseModel):
    userId: str


class SystemConfigBackupsDto(BaseModel):
    database: DatabaseBackupConfig


class SystemConfigFacesDto(BaseModel):
    import_: Annotated[bool, Field(alias="import")]


class SystemConfigGeneratedFullsizeImageDto(BaseModel):
    enabled: bool
    format: ImageFormat
    quality: Annotated[int, Field(ge=1, le=100)]


class SystemConfigGeneratedImageDto(BaseModel):
    format: ImageFormat
    quality: Annotated[int, Field(ge=1, le=100)]
    size: Annotated[int, Field(ge=1)]


class SystemConfigImageDto(BaseModel):
    colorspace: Colorspace
    extractEmbedded: bool
    fullsize: SystemConfigGeneratedFullsizeImageDto
    preview: SystemConfigGeneratedImageDto
    thumbnail: SystemConfigGeneratedImageDto


class SystemConfigJobDto(BaseModel):
    backgroundTask: JobSettingsDto
    faceDetection: JobSettingsDto
    library: JobSettingsDto
    metadataExtraction: JobSettingsDto
    migration: JobSettingsDto
    notifications: JobSettingsDto
    search: JobSettingsDto
    sidecar: JobSettingsDto
    smartSearch: JobSettingsDto
    thumbnailGeneration: JobSettingsDto
    videoConversion: JobSettingsDto


class SystemConfigLibraryScanDto(BaseModel):
    cronExpression: str
    enabled: bool


class SystemConfigLibraryWatchDto(BaseModel):
    enabled: bool


class SystemConfigLoggingDto(BaseModel):
    enabled: bool
    level: LogLevel


class SystemConfigMachineLearningDto(BaseModel):
    clip: CLIPConfig
    duplicateDetection: DuplicateDetectionConfig
    enabled: bool
    facialRecognition: FacialRecognitionConfig
    url: Annotated[
        Optional[str], Field(description="This property was deprecated in v1.122.0")
    ] = None
    urls: List[AnyUrl]


class SystemConfigMapDto(BaseModel):
    darkStyle: AnyUrl
    enabled: bool
    lightStyle: AnyUrl


class SystemConfigMetadataDto(BaseModel):
    faces: SystemConfigFacesDto


class SystemConfigNewVersionCheckDto(BaseModel):
    enabled: bool


class SystemConfigNightlyTasksDto(BaseModel):
    clusterNewFaces: bool
    databaseCleanup: bool
    generateMemories: bool
    missingThumbnails: bool
    startTime: str
    syncQuotaUsage: bool


class SystemConfigOAuthDto(BaseModel):
    autoLaunch: bool
    autoRegister: bool
    buttonText: str
    clientId: str
    clientSecret: str
    defaultStorageQuota: Annotated[int, Field(ge=0)]
    enabled: bool
    issuerUrl: str
    mobileOverrideEnabled: bool
    mobileRedirectUri: AnyUrl
    profileSigningAlgorithm: str
    roleClaim: str
    scope: str
    signingAlgorithm: str
    storageLabelClaim: str
    storageQuotaClaim: str
    timeout: Annotated[int, Field(ge=1)]
    tokenEndpointAuthMethod: OAuthTokenEndpointAuthMethod


class SystemConfigPasswordLoginDto(BaseModel):
    enabled: bool


class SystemConfigReverseGeocodingDto(BaseModel):
    enabled: bool


class SystemConfigServerDto(BaseModel):
    externalDomain: AnyUrl
    loginPageMessage: str
    publicUsers: bool


class SystemConfigSmtpTransportDto(BaseModel):
    host: str
    ignoreCert: bool
    password: str
    port: Annotated[float, Field(ge=0.0, le=65535.0)]
    username: str


class SystemConfigStorageTemplateDto(BaseModel):
    enabled: bool
    hashVerificationEnabled: bool
    template: str


class SystemConfigTemplateEmailsDto(BaseModel):
    albumInviteTemplate: str
    albumUpdateTemplate: str
    welcomeTemplate: str


class SystemConfigTemplateStorageOptionDto(BaseModel):
    dayOptions: List[str]
    hourOptions: List[str]
    minuteOptions: List[str]
    monthOptions: List[str]
    presetOptions: List[str]
    secondOptions: List[str]
    weekOptions: List[str]
    yearOptions: List[str]


class SystemConfigTemplatesDto(BaseModel):
    email: SystemConfigTemplateEmailsDto


class SystemConfigThemeDto(BaseModel):
    customCss: str


class SystemConfigTrashDto(BaseModel):
    days: Annotated[int, Field(ge=0)]
    enabled: bool


class SystemConfigUserDto(BaseModel):
    deleteDelay: Annotated[int, Field(ge=1)]


class TagBulkAssetsDto(BaseModel):
    assetIds: List[UUID]
    tagIds: List[UUID]


class TagBulkAssetsResponseDto(BaseModel):
    count: int


class TagCreateDto(BaseModel):
    color: Annotated[
        Optional[str],
        Field(pattern="^#?([0-9A-F]{3}|[0-9A-F]{4}|[0-9A-F]{6}|[0-9A-F]{8})$"),
    ] = None
    name: str
    parentId: Optional[UUID] = None


class TagResponseDto(BaseModel):
    color: Optional[str] = None
    createdAt: AwareDatetime
    id: str
    name: str
    parentId: Optional[str] = None
    updatedAt: AwareDatetime
    value: str


class TagUpdateDto(BaseModel):
    color: Optional[str] = None


class TagUpsertDto(BaseModel):
    tags: List[str]


class TagsResponse(BaseModel):
    enabled: bool
    sidebarWeb: bool


class TagsUpdate(BaseModel):
    enabled: Optional[bool] = None
    sidebarWeb: Optional[bool] = None


class TemplateDto(BaseModel):
    template: str


class TemplateResponseDto(BaseModel):
    html: str
    name: str


class TestEmailResponseDto(BaseModel):
    messageId: str


class StackItem(RootModel[Optional[List[str]]]):
    root: Annotated[Optional[List[str]], Field(max_length=2, min_length=2)] = None


class TimeBucketAssetResponseDto(BaseModel):
    city: Annotated[
        List[str], Field(description="Array of city names extracted from EXIF GPS data")
    ]
    country: Annotated[
        List[str],
        Field(description="Array of country names extracted from EXIF GPS data"),
    ]
    duration: Annotated[
        List[str],
        Field(
            description="Array of video durations in HH:MM:SS format (null for images)"
        ),
    ]
    fileCreatedAt: Annotated[
        List[str],
        Field(
            description="Array of file creation timestamps in UTC (ISO 8601 format, without timezone)"
        ),
    ]
    id: Annotated[List[str], Field(description="Array of asset IDs in the time bucket")]
    isFavorite: Annotated[
        List[bool],
        Field(description="Array indicating whether each asset is favorited"),
    ]
    isImage: Annotated[
        List[bool],
        Field(
            description="Array indicating whether each asset is an image (false for videos)"
        ),
    ]
    isTrashed: Annotated[
        List[bool],
        Field(description="Array indicating whether each asset is in the trash"),
    ]
    latitude: Annotated[
        Optional[List[float]],
        Field(description="Array of latitude coordinates extracted from EXIF GPS data"),
    ] = None
    livePhotoVideoId: Annotated[
        List[str],
        Field(
            description="Array of live photo video asset IDs (null for non-live photos)"
        ),
    ]
    localOffsetHours: Annotated[
        List[float],
        Field(
            description="Array of UTC offset hours at the time each photo was taken. Positive values are east of UTC, negative values are west of UTC. Values may be fractional (e.g., 5.5 for +05:30, -9.75 for -09:45). Applying this offset to 'fileCreatedAt' will give you the time the photo was taken from the photographer's perspective."
        ),
    ]
    longitude: Annotated[
        Optional[List[float]],
        Field(
            description="Array of longitude coordinates extracted from EXIF GPS data"
        ),
    ] = None
    ownerId: Annotated[
        List[str], Field(description="Array of owner IDs for each asset")
    ]
    projectionType: Annotated[
        List[str],
        Field(
            description='Array of projection types for 360° content (e.g., "EQUIRECTANGULAR", "CUBEFACE", "CYLINDRICAL")'
        ),
    ]
    ratio: Annotated[
        List[float],
        Field(description="Array of aspect ratios (width/height) for each asset"),
    ]
    stack: Annotated[
        Optional[List[StackItem]],
        Field(
            description="Array of stack information as [stackId, assetCount] tuples (null for non-stacked assets)"
        ),
    ] = None
    thumbhash: Annotated[
        List[str],
        Field(
            description="Array of BlurHash strings for generating asset previews (base64 encoded)"
        ),
    ]
    visibility: Annotated[
        List[AssetVisibility],
        Field(
            description="Array of visibility statuses for each asset (e.g., ARCHIVE, TIMELINE, HIDDEN, LOCKED)"
        ),
    ]


class TimeBucketsResponseDto(BaseModel):
    count: Annotated[
        int, Field(description="Number of assets in this time bucket", examples=[42])
    ]
    timeBucket: Annotated[
        str,
        Field(
            description="Time bucket identifier in YYYY-MM-DD format representing the start of the time period",
            examples=["2024-01-01"],
        ),
    ]


class ToneMapping(Enum):
    hable = "hable"
    mobius = "mobius"
    reinhard = "reinhard"
    disabled = "disabled"


class TranscodeHWAccel(Enum):
    nvenc = "nvenc"
    qsv = "qsv"
    vaapi = "vaapi"
    rkmpp = "rkmpp"
    disabled = "disabled"


class TranscodePolicy(Enum):
    all = "all"
    optimal = "optimal"
    bitrate = "bitrate"
    required = "required"
    disabled = "disabled"


class TrashResponseDto(BaseModel):
    count: int


class UpdateAlbumDto(BaseModel):
    albumName: Optional[str] = None
    albumThumbnailAssetId: Optional[UUID] = None
    description: Optional[str] = None
    isActivityEnabled: Optional[bool] = None
    order: Optional[AssetOrder] = None


class UpdateAlbumUserDto(BaseModel):
    role: AlbumUserRole


class UpdateAssetDto(BaseModel):
    dateTimeOriginal: Optional[str] = None
    description: Optional[str] = None
    isFavorite: Optional[bool] = None
    latitude: Optional[float] = None
    livePhotoVideoId: Optional[UUID] = None
    longitude: Optional[float] = None
    rating: Annotated[Optional[float], Field(ge=-1.0, le=5.0)] = None
    visibility: Optional[AssetVisibility] = None


class UpdateLibraryDto(BaseModel):
    exclusionPatterns: Annotated[Optional[List[str]], Field(max_length=128)] = None
    importPaths: Annotated[Optional[List[str]], Field(max_length=128)] = None
    name: Optional[str] = None


class UsageByUserDto(BaseModel):
    photos: int
    quotaSizeInBytes: int
    usage: int
    usagePhotos: int
    usageVideos: int
    userId: str
    userName: str
    videos: int


class UserAdminDeleteDto(BaseModel):
    force: Optional[bool] = None


class UserAvatarColor(Enum):
    primary = "primary"
    pink = "pink"
    red = "red"
    yellow = "yellow"
    blue = "blue"
    green = "green"
    purple = "purple"
    orange = "orange"
    gray = "gray"
    amber = "amber"


class UserLicense(BaseModel):
    activatedAt: AwareDatetime
    activationKey: str
    licenseKey: str


class UserMetadataKey(Enum):
    preferences = "preferences"
    license = "license"
    onboarding = "onboarding"


class UserResponseDto(BaseModel):
    avatarColor: UserAvatarColor
    email: str
    id: str
    name: str
    profileChangedAt: AwareDatetime
    profileImagePath: str


class UserStatus(Enum):
    active = "active"
    removing = "removing"
    deleted = "deleted"


class UserUpdateMeDto(BaseModel):
    avatarColor: Optional[UserAvatarColor] = None
    email: Optional[EmailStr] = None
    name: Optional[str] = None
    password: Optional[str] = None


class ValidateAccessTokenResponseDto(BaseModel):
    authStatus: bool


class ValidateLibraryDto(BaseModel):
    exclusionPatterns: Annotated[Optional[List[str]], Field(max_length=128)] = None
    importPaths: Annotated[Optional[List[str]], Field(max_length=128)] = None


class ValidateLibraryImportPathResponseDto(BaseModel):
    importPath: str
    isValid: bool
    message: Optional[str] = None


class ValidateLibraryResponseDto(BaseModel):
    importPaths: Optional[List[ValidateLibraryImportPathResponseDto]] = None


class VersionCheckStateResponseDto(BaseModel):
    checkedAt: str
    releaseVersion: str


class VideoCodec(Enum):
    h264 = "h264"
    hevc = "hevc"
    vp9 = "vp9"
    av1 = "av1"


class VideoContainer(Enum):
    mov = "mov"
    mp4 = "mp4"
    ogg = "ogg"
    webm = "webm"


class APIKeyCreateDto(BaseModel):
    name: Optional[str] = None
    permissions: Annotated[List[Permission], Field(min_length=1)]


class APIKeyResponseDto(BaseModel):
    createdAt: AwareDatetime
    id: str
    name: str
    permissions: List[Permission]
    updatedAt: AwareDatetime


class APIKeyUpdateDto(BaseModel):
    name: Optional[str] = None
    permissions: Annotated[Optional[List[Permission]], Field(min_length=1)] = None


class ActivityCreateDto(BaseModel):
    albumId: UUID
    assetId: Optional[UUID] = None
    comment: Optional[str] = None
    type: ReactionType


class ActivityResponseDto(BaseModel):
    assetId: str
    comment: Optional[str] = None
    createdAt: AwareDatetime
    id: str
    type: ReactionType
    user: UserResponseDto


class AlbumUserAddDto(BaseModel):
    role: Optional[AlbumUserRole] = AlbumUserRole.editor
    userId: UUID


class AlbumUserCreateDto(BaseModel):
    role: AlbumUserRole
    userId: UUID


class AlbumUserResponseDto(BaseModel):
    role: AlbumUserRole
    user: UserResponseDto


class AlbumsAddAssetsResponseDto(BaseModel):
    error: Optional[BulkIdErrorReason] = None
    success: bool


class AlbumsResponse(BaseModel):
    defaultAssetOrder: AssetOrder


class AlbumsUpdate(BaseModel):
    defaultAssetOrder: Optional[AssetOrder] = None


class AssetBulkUpdateDto(BaseModel):
    dateTimeOriginal: Optional[str] = None
    dateTimeRelative: Optional[float] = None
    description: Optional[str] = None
    duplicateId: Optional[str] = None
    ids: List[UUID]
    isFavorite: Optional[bool] = None
    latitude: Optional[float] = None
    longitude: Optional[float] = None
    rating: Annotated[Optional[float], Field(ge=-1.0, le=5.0)] = None
    timeZone: Optional[str] = None
    visibility: Optional[AssetVisibility] = None


class AssetBulkUploadCheckDto(BaseModel):
    assets: List[AssetBulkUploadCheckItem]


class AssetBulkUploadCheckResponseDto(BaseModel):
    results: List[AssetBulkUploadCheckResult]


class AssetFaceResponseDto(BaseModel):
    boundingBoxX1: int
    boundingBoxX2: int
    boundingBoxY1: int
    boundingBoxY2: int
    id: UUID
    imageHeight: int
    imageWidth: int
    person: PersonResponseDto
    sourceType: Optional[SourceType] = None


class AssetFaceUpdateDto(BaseModel):
    data: List[AssetFaceUpdateItem]


class AssetFaceWithoutPersonResponseDto(BaseModel):
    boundingBoxX1: int
    boundingBoxX2: int
    boundingBoxY1: int
    boundingBoxY2: int
    id: UUID
    imageHeight: int
    imageWidth: int
    sourceType: Optional[SourceType] = None


class AssetMediaCreateDto(BaseModel):
    assetData: bytes
    deviceAssetId: str
    deviceId: str
    duration: Optional[str] = None
    fileCreatedAt: AwareDatetime
    fileModifiedAt: AwareDatetime
    filename: Optional[str] = None
    isFavorite: Optional[bool] = None
    livePhotoVideoId: Optional[UUID] = None
    metadata: List[AssetMetadataUpsertItemDto]
    sidecarData: Optional[bytes] = None
    visibility: Optional[AssetVisibility] = None


class AssetMediaResponseDto(BaseModel):
    id: str
    status: AssetMediaStatus


class AssetMetadataUpsertDto(BaseModel):
    items: List[AssetMetadataUpsertItemDto]


class AvatarUpdate(BaseModel):
    color: Optional[UserAvatarColor] = None


class CreateAlbumDto(BaseModel):
    albumName: str
    albumUsers: Optional[List[AlbumUserCreateDto]] = None
    assetIds: Optional[List[UUID]] = None
    description: Optional[str] = None


class JobCreateDto(BaseModel):
    name: ManualJobName


class JobStatusDto(BaseModel):
    jobCounts: JobCountsDto
    queueStatus: QueueStatusDto


class MemoryCreateDto(BaseModel):
    assetIds: Optional[List[UUID]] = None
    data: OnThisDayDto
    isSaved: Optional[bool] = None
    memoryAt: AwareDatetime
    seenAt: Optional[AwareDatetime] = None
    type: MemoryType


class NotificationCreateDto(BaseModel):
    data: Optional[Dict[str, Any]] = None
    description: Optional[str] = None
    level: Optional[NotificationLevel] = None
    readAt: Optional[AwareDatetime] = None
    title: str
    type: Optional[NotificationType] = None
    userId: UUID


class NotificationDto(BaseModel):
    createdAt: AwareDatetime
    data: Optional[Dict[str, Any]] = None
    description: Optional[str] = None
    id: str
    level: NotificationLevel
    readAt: Optional[AwareDatetime] = None
    title: str
    type: NotificationType


class PartnerResponseDto(BaseModel):
    avatarColor: UserAvatarColor
    email: str
    id: str
    inTimeline: Optional[bool] = None
    name: str
    profileChangedAt: AwareDatetime
    profileImagePath: str


class PeopleResponseDto(BaseModel):
    hasNextPage: Annotated[
        Optional[bool], Field(description="This property was added in v1.110.0")
    ] = None
    hidden: int
    people: List[PersonResponseDto]
    total: int


class PeopleUpdateDto(BaseModel):
    people: List[PeopleUpdateItem]


class PersonWithFacesResponseDto(BaseModel):
    birthDate: date
    color: Annotated[
        Optional[str], Field(description="This property was added in v1.126.0")
    ] = None
    faces: List[AssetFaceWithoutPersonResponseDto]
    id: str
    isFavorite: Annotated[
        Optional[bool], Field(description="This property was added in v1.126.0")
    ] = None
    isHidden: bool
    name: str
    thumbnailPath: str
    updatedAt: Annotated[
        Optional[AwareDatetime],
        Field(description="This property was added in v1.107.0"),
    ] = None


class ServerStatsResponseDto(BaseModel):
    photos: int
    usage: int
    usageByUser: Annotated[
        List[UsageByUserDto],
        Field(
            examples=[
                [
                    {
                        "photos": 1,
                        "videos": 1,
                        "diskUsageRaw": 2,
                        "usagePhotos": 1,
                        "usageVideos": 1,
                    }
                ]
            ],
            title="Array of usage for each user",
        ),
    ]
    usagePhotos: int
    usageVideos: int
    videos: int


class SharedLinkCreateDto(BaseModel):
    albumId: Optional[UUID] = None
    allowDownload: Optional[bool] = True
    allowUpload: Optional[bool] = None
    assetIds: Optional[List[UUID]] = None
    description: Optional[str] = None
    expiresAt: Optional[AwareDatetime] = None
    password: Optional[str] = None
    showMetadata: Optional[bool] = True
    slug: Optional[str] = None
    type: SharedLinkType


class SyncAckDeleteDto(BaseModel):
    types: Optional[List[SyncEntityType]] = None


class SyncAckDto(BaseModel):
    ack: str
    type: SyncEntityType


class SyncAuthUserV1(BaseModel):
    avatarColor: UserAvatarColor
    deletedAt: AwareDatetime
    email: str
    hasProfileImage: bool
    id: str
    isAdmin: bool
    name: str
    oauthId: str
    pinCode: str
    profileChangedAt: AwareDatetime
    quotaSizeInBytes: int
    quotaUsageInBytes: int
    storageLabel: str


class SyncUserMetadataDeleteV1(BaseModel):
    key: UserMetadataKey
    userId: str


class SyncUserMetadataV1(BaseModel):
    key: UserMetadataKey
    userId: str
    value: Dict[str, Any]


class SyncUserV1(BaseModel):
    avatarColor: UserAvatarColor
    deletedAt: AwareDatetime
    email: str
    hasProfileImage: bool
    id: str
    name: str
    profileChangedAt: AwareDatetime


class SystemConfigFFmpegDto(BaseModel):
    accel: TranscodeHWAccel
    accelDecode: bool
    acceptedAudioCodecs: List[AudioCodec]
    acceptedContainers: List[VideoContainer]
    acceptedVideoCodecs: List[VideoCodec]
    bframes: Annotated[int, Field(ge=-1, le=16)]
    cqMode: CQMode
    crf: Annotated[int, Field(ge=0, le=51)]
    gopSize: Annotated[int, Field(ge=0)]
    maxBitrate: str
    preferredHwDevice: str
    preset: str
    refs: Annotated[int, Field(ge=0, le=6)]
    targetAudioCodec: AudioCodec
    targetResolution: str
    targetVideoCodec: VideoCodec
    temporalAQ: bool
    threads: Annotated[int, Field(ge=0)]
    tonemap: ToneMapping
    transcode: TranscodePolicy
    twoPass: bool


class SystemConfigLibraryDto(BaseModel):
    scan: SystemConfigLibraryScanDto
    watch: SystemConfigLibraryWatchDto


class SystemConfigSmtpDto(BaseModel):
    enabled: bool
    from_: Annotated[str, Field(alias="from")]
    replyTo: str
    transport: SystemConfigSmtpTransportDto


class UserAdminCreateDto(BaseModel):
    avatarColor: Optional[UserAvatarColor] = None
    email: EmailStr
    isAdmin: Optional[bool] = None
    name: str
    notify: Optional[bool] = None
    password: str
    quotaSizeInBytes: Annotated[Optional[int], Field(ge=0)] = None
    shouldChangePassword: Optional[bool] = None
    storageLabel: Optional[str] = None


class UserAdminResponseDto(BaseModel):
    avatarColor: UserAvatarColor
    createdAt: AwareDatetime
    deletedAt: AwareDatetime
    email: str
    id: str
    isAdmin: bool
    license: UserLicense
    name: str
    oauthId: str
    profileChangedAt: AwareDatetime
    profileImagePath: str
    quotaSizeInBytes: int
    quotaUsageInBytes: int
    shouldChangePassword: bool
    status: UserStatus
    storageLabel: str
    updatedAt: AwareDatetime


class UserAdminUpdateDto(BaseModel):
    avatarColor: Optional[UserAvatarColor] = None
    email: Optional[EmailStr] = None
    isAdmin: Optional[bool] = None
    name: Optional[str] = None
    password: Optional[str] = None
    pinCode: Annotated[Optional[str], Field(examples=["123456"])] = None
    quotaSizeInBytes: Annotated[Optional[int], Field(ge=0)] = None
    shouldChangePassword: Optional[bool] = None
    storageLabel: Optional[str] = None


class UserPreferencesResponseDto(BaseModel):
    albums: AlbumsResponse
    cast: CastResponse
    download: DownloadResponse
    emailNotifications: EmailNotificationsResponse
    folders: FoldersResponse
    memories: MemoriesResponse
    people: PeopleResponse
    purchase: PurchaseResponse
    ratings: RatingsResponse
    sharedLinks: SharedLinksResponse
    tags: TagsResponse


class UserPreferencesUpdateDto(BaseModel):
    albums: Optional[AlbumsUpdate] = None
    avatar: Optional[AvatarUpdate] = None
    cast: Optional[CastUpdate] = None
    download: Optional[DownloadUpdate] = None
    emailNotifications: Optional[EmailNotificationsUpdate] = None
    folders: Optional[FoldersUpdate] = None
    memories: Optional[MemoriesUpdate] = None
    people: Optional[PeopleUpdate] = None
    purchase: Optional[PurchaseUpdate] = None
    ratings: Optional[RatingsUpdate] = None
    sharedLinks: Optional[SharedLinksUpdate] = None
    tags: Optional[TagsUpdate] = None


class APIKeyCreateResponseDto(BaseModel):
    apiKey: APIKeyResponseDto
    secret: str


class AddUsersDto(BaseModel):
    albumUsers: Annotated[List[AlbumUserAddDto], Field(min_length=1)]


class AllJobStatusResponseDto(BaseModel):
    backgroundTask: JobStatusDto
    backupDatabase: JobStatusDto
    duplicateDetection: JobStatusDto
    faceDetection: JobStatusDto
    facialRecognition: JobStatusDto
    library: JobStatusDto
    metadataExtraction: JobStatusDto
    migration: JobStatusDto
    notifications: JobStatusDto
    search: JobStatusDto
    sidecar: JobStatusDto
    smartSearch: JobStatusDto
    storageTemplateMigration: JobStatusDto
    thumbnailGeneration: JobStatusDto
    videoConversion: JobStatusDto


class AssetResponseDto(BaseModel):
    checksum: Annotated[str, Field(description="base64 encoded sha1 hash")]
    createdAt: Annotated[
        AwareDatetime,
        Field(
            description="The UTC timestamp when the asset was originally uploaded to Immich.",
            examples=["2024-01-15T20:30:00.000Z"],
        ),
    ]
    deviceAssetId: str
    deviceId: str
    duplicateId: Optional[str] = None
    duration: str
    exifInfo: Optional[ExifResponseDto] = None
    fileCreatedAt: Annotated[
        AwareDatetime,
        Field(
            description="The actual UTC timestamp when the file was created/captured, preserving timezone information. This is the authoritative timestamp for chronological sorting within timeline groups. Combined with timezone data, this can be used to determine the exact moment the photo was taken.",
            examples=["2024-01-15T19:30:00.000Z"],
        ),
    ]
    fileModifiedAt: Annotated[
        AwareDatetime,
        Field(
            description="The UTC timestamp when the file was last modified on the filesystem. This reflects the last time the physical file was changed, which may be different from when the photo was originally taken.",
            examples=["2024-01-16T10:15:00.000Z"],
        ),
    ]
    hasMetadata: bool
    id: str
    isArchived: bool
    isFavorite: bool
    isOffline: bool
    isTrashed: bool
    libraryId: Annotated[
        Optional[str], Field(description="This property was deprecated in v1.106.0")
    ] = None
    livePhotoVideoId: Optional[str] = None
    localDateTime: Annotated[
        AwareDatetime,
        Field(
            description='The local date and time when the photo/video was taken, derived from EXIF metadata. This represents the photographer\'s local time regardless of timezone, stored as a timezone-agnostic timestamp. Used for timeline grouping by "local" days and months.',
            examples=["2024-01-15T14:30:00.000Z"],
        ),
    ]
    originalFileName: str
    originalMimeType: Optional[str] = None
    originalPath: str
    owner: Optional[UserResponseDto] = None
    ownerId: str
    people: Optional[List[PersonWithFacesResponseDto]] = None
    resized: Annotated[
        Optional[bool], Field(description="This property was deprecated in v1.113.0")
    ] = None
    stack: Optional[AssetStackResponseDto] = None
    tags: Optional[List[TagResponseDto]] = None
    thumbhash: str
    type: AssetTypeEnum
    unassignedFaces: Optional[List[AssetFaceWithoutPersonResponseDto]] = None
    updatedAt: Annotated[
        AwareDatetime,
        Field(
            description="The UTC timestamp when the asset record was last updated in the database. This is automatically maintained by the database and reflects when any field in the asset was last modified.",
            examples=["2024-01-16T12:45:30.000Z"],
        ),
    ]
    visibility: AssetVisibility


class DuplicateResponseDto(BaseModel):
    assets: List[AssetResponseDto]
    duplicateId: str


class MemoryResponseDto(BaseModel):
    assets: List[AssetResponseDto]
    createdAt: AwareDatetime
    data: OnThisDayDto
    deletedAt: Optional[AwareDatetime] = None
    hideAt: Optional[AwareDatetime] = None
    id: str
    isSaved: bool
    memoryAt: AwareDatetime
    ownerId: str
    seenAt: Optional[AwareDatetime] = None
    showAt: Optional[AwareDatetime] = None
    type: MemoryType
    updatedAt: AwareDatetime


class SearchAssetResponseDto(BaseModel):
    count: int
    facets: List[SearchFacetResponseDto]
    items: List[AssetResponseDto]
    nextPage: str
    total: int


class SearchExploreItem(BaseModel):
    data: AssetResponseDto
    value: str


class SearchExploreResponseDto(BaseModel):
    fieldName: str
    items: List[SearchExploreItem]


class StackResponseDto(BaseModel):
    assets: List[AssetResponseDto]
    id: str
    primaryAssetId: str


class SystemConfigNotificationsDto(BaseModel):
    smtp: SystemConfigSmtpDto


class AlbumResponseDto(BaseModel):
    albumName: str
    albumThumbnailAssetId: str
    albumUsers: List[AlbumUserResponseDto]
    assetCount: int
    assets: List[AssetResponseDto]
    createdAt: AwareDatetime
    description: str
    endDate: Optional[AwareDatetime] = None
    hasSharedLink: bool
    id: str
    isActivityEnabled: bool
    lastModifiedAssetTimestamp: Optional[AwareDatetime] = None
    order: Optional[AssetOrder] = None
    owner: UserResponseDto
    ownerId: str
    shared: bool
    startDate: Optional[AwareDatetime] = None
    updatedAt: AwareDatetime


class AssetDeltaSyncResponseDto(BaseModel):
    deleted: List[str]
    needsFullSync: bool
    upserted: List[AssetResponseDto]


class SearchAlbumResponseDto(BaseModel):
    count: int
    facets: List[SearchFacetResponseDto]
    items: List[AlbumResponseDto]
    total: int


class SearchResponseDto(BaseModel):
    albums: SearchAlbumResponseDto
    assets: SearchAssetResponseDto


class SharedLinkResponseDto(BaseModel):
    album: Optional[AlbumResponseDto] = None
    allowDownload: bool
    allowUpload: bool
    assets: List[AssetResponseDto]
    createdAt: AwareDatetime
    description: str
    expiresAt: AwareDatetime
    id: str
    key: str
    password: str
    showMetadata: bool
    slug: str
    token: Optional[str] = None
    type: SharedLinkType
    userId: str


class SystemConfigDto(BaseModel):
    backup: SystemConfigBackupsDto
    ffmpeg: SystemConfigFFmpegDto
    image: SystemConfigImageDto
    job: SystemConfigJobDto
    library: SystemConfigLibraryDto
    logging: SystemConfigLoggingDto
    machineLearning: SystemConfigMachineLearningDto
    map: SystemConfigMapDto
    metadata: SystemConfigMetadataDto
    newVersionCheck: SystemConfigNewVersionCheckDto
    nightlyTasks: SystemConfigNightlyTasksDto
    notifications: SystemConfigNotificationsDto
    oauth: SystemConfigOAuthDto
    passwordLogin: SystemConfigPasswordLoginDto
    reverseGeocoding: SystemConfigReverseGeocodingDto
    server: SystemConfigServerDto
    storageTemplate: SystemConfigStorageTemplateDto
    templates: SystemConfigTemplatesDto
    theme: SystemConfigThemeDto
    trash: SystemConfigTrashDto
    user: SystemConfigUserDto
